#!/usr/bin/env python
"""
The Palette Server backup script.
NOTE: All Python imports should be limited to the standard library.
"""
import argparse
import logging
import os
import shutil
import sys
import subprocess
import tempfile
from datetime import datetime

FILENAME_FMT = "%Y%m%d%H%M%S.psbak"

class Config(object):
    """ Simple object for (global) information """
    def __init__(self):
        topdir = None
        args = None

CONFIG = Config()

def find_restore_script():
    """Return the path of the 'palette-restore' script."""
    for path in (os.path.join(os.path.dirname(__file__), 'palette-restore'),
                 '/usr/local/sbin/palette-restore',
                 '/usr/sbin/palette-restore'):
        if os.path.exists(path):
            return path
    raise RuntimeError("The 'palette-restore' script could not be found.")

def main():
    """ The script main() """

    if os.geteuid() != 0:
        print >> sys.stderr, "This application must be run as root."
        sys.exit(1)

    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--filename', default=None)
    parser.add_argument('--verbose', '-v', action='store_true', default=False)
    parser.add_argument('--debug', action='store_true', default=False)
    parser.add_argument('--no-db', action='store_false',
                        default=True, dest='db')
    args = parser.parse_args()
    CONFIG.args = args

    if args.debug:
        logging.basicConfig(level=logging.DEBUG, format="%(message)s")
    elif args.verbose:
        logging.basicConfig(level=logging.INFO, format="%(message)s")

    if args.filename == None:
        now = datetime.now()
        filename = now.strftime(FILENAME_FMT)
    else:
        filename = args.filename
    filename = os.path.abspath(os.path.expanduser(filename))

    topdir = tempfile.mkdtemp()
    logging.info('Using temporary directory : ' + topdir)
    CONFIG.topdir = topdir

    restore_script = find_restore_script()
    logging.info('copying %s to %s', restore_script, topdir)
    shutil.copy(restore_script, topdir)

    if args.db:
        os.mkdir(os.path.join(topdir, 'root'))
        cmd = 'pg_dump paldb -f root/paldb.sql'
        logging.info(cmd)
        subprocess.check_call(cmd, shell=True, cwd=topdir)
    else:
        logging.info('Database backup skipped')

    cmd = 'tar cjf ' + filename + ' *'
    logging.info(cmd)
    subprocess.check_call(cmd, shell=True, cwd=topdir)

    shutil.rmtree(topdir)

    print filename

if __name__ == '__main__':
    main()
