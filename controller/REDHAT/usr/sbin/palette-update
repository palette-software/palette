#!/bin/bash
#
# This script checks to see if there there are packages to be installed
# and installs them.
# This script needs to be run from the cron

PATH=/sbin:/usr/sbin:/bin:/usr/bin
export DEBIAN_FRONTEND="noninteractive"

INI_FILE=/etc/palette_update.ini
PACKAGES="controller palette"
PACKAGE_OPTIONAL="myip"

delayer()
{
    if [ ! -t 0 ]; then
        # If we are run in the background (not from a shell terminal):
        # Sleep a random amount of time to not overload the servers
        SLEEP_TIME=$(($RANDOM % 300))
        echo Sleeping for $SLEEP_TIME seconds >> $LOG_FILE
        sleep $SLEEP_TIME
    fi
}

usage() {
    echo Usage: $0 '[--now]'
}

if ! options=$(getopt -o fn --longoptions now -- "$@")
then
    # getopt will report the error
    usage
    exit 1
fi

set -- $options

while [ $# -gt 0 ]
do
    case $1 in
    -n|--now)
        now="yes" ;;
    --)
        shift; break;;
    -*)
        echo "$0: error - unrecognized option $1" 2>&1
        usage; exit 1 ;;
    *)
        break ;;
    esac
    shift
done

if [ $# -ne 0 ]; then
    usage
    exit 2
fi

# If running from a terminal, output to the terminal.
if [ -t 0 ]; then
    LOG_FILE=/dev/tty
    echo Sending output to the tty
else
    LOG_FILE=/var/log/palette/update.log
fi

echo "**************" >> $LOG_FILE
date >> $LOG_FILE
echo "Palette Updater Running" >> $LOG_FILE

if [ "$now" = "yes" ]; then
    echo Updating now >> $LOG_FILE
else
    delayer
fi

# Check to see if updating is disabled
if [ -f $INI_FILE ]; then
    # Do the update unless "auto-update" is disabled in the ini file.
    grep --after-context=1 '\[update\]' $INI_FILE | grep -q "auto_update = false"
    if [ $? -eq 0 ]; then
        echo Auto update is disabled >> $LOG_FILE
        exit 0
    fi
fi

echo Doing update... >> $LOG_FILE 2>&1

PROXY_CONFIG_FILE=/var/palette/.proxy

if [ -r $PROXY_CONFIG_FILE ]; then
    echo Found proxy file >> $LOG_FILE
    source /var/palette/.proxy
fi

# Update only from the palette repo
apt-get update \
    -o Dir::Etc::sourcelist="sources.list.d/palette.list" \
    -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" \
    >> $LOG_FILE 2>&1

echo Doing install ... >> $LOG_FILE 2>&1

# Keep OLD config files (change to use NEW config files after upgraded to 1.0.1)
#apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y $PACKAGES >> $LOG_FILE 2>&1
# After 1.0.1 is installed and beyond, force using the new config file:
apt-get install -y \
    -o Dir::Etc::sourcelist="sources.list.d/palette.list" \
    -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" \
    -o Dpkg::Options::=--force-confnew $PACKAGES >> $LOG_FILE 2>&1

dpkg -s $PACKAGE_OPTIONAL > /dev/null 2>&1 && {
    echo Will update $PACKAGE_OPTIONAL if a newer version is available. >> $LOG_FILE
    apt-get install -y $MORE_PACKAGES \
        -o Dir::Etc::sourcelist="sources.list.d/palette.list" \
        -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" \
        >> $LOG_FILE 2>&1
} || {
    echo Will not check to update $PACKAGE_OPTIONAL as it is not installed. >> $LOG_FILE
}

# log that we finished with the update
echo "Palette updates (if any) installed" >> $LOG_FILE
echo "Palette update check finished at `date`" >> $LOG_FILE

echo "Palette Updater Finished"

exit 0
