#!/usr/bin/env python
"""
The Palette Server restore script.
NOTE: All Python imports should be limited to the standard library.
"""
import argparse
import logging
import os
import subprocess
import sys

RESTORE_SQL = '/root/paldb.sql'

class Config(object):
    """ Simple object for (global) information """
    def __init__(self):
        args = None

CONFIG = Config()

def restore_database():
    """Run the sql script generated by pg_dump"""
    if not CONFIG.args.db:
        logging.info('Database restore skipped')
        return
    if not os.path.exists(RESTORE_SQL):
        logging.info("Database restore skipped, no %s", RESTORE_SQL)
        return

    if CONFIG.args.debug:
        cmd = 'psql paldb --all'
    else:
        cmd = 'psql paldb --quiet'
    cmd += ' -c "drop schema public cascade;create schema public;"'
    if not CONFIG.args.debug:
        cmd += ' >/dev/null  2>&1'
    logging.info(cmd)
    cmd = subprocess.check_call(cmd, shell=True)

    if CONFIG.args.debug:
        cmd = 'psql paldb --all'
    else:
        cmd = 'psql paldb --quiet'
    cmd += ' -f ' + RESTORE_SQL
    if not CONFIG.args.debug:
        cmd += ' >/dev/null 2>&1'
    logging.info(cmd)
    subprocess.check_call(cmd, shell=True)

def stop_services():
    """ Stop apache and controller """
    if not CONFIG.args.services:
        logging.info("Stop services skipped")
        return
    for service in ('apache2', 'controller'):
        cmd = 'service ' + service + ' stop'
        if not CONFIG.args.debug:
            cmd += ' >/dev/null 2>&1'
        logging.info(cmd)
        subprocess.check_call(cmd, shell=True)

def start_services():
    """ Start apache and controller """
    if not CONFIG.args.services:
        logging.info("Start services skipped")
        return
    for service in ('apache2', 'controller'):
        cmd = 'service ' + service + ' start'
        if not CONFIG.args.debug:
            cmd += ' >/dev/null 2>&1'
        logging.info(cmd)
        subprocess.check_call(cmd, shell=True)

def main():
    """ The script main() """
    
    if os.geteuid() != 0:
        print >> sys.stderr, "This application must be run as root."
        sys.exit(1)

    parser = argparse.ArgumentParser()
    parser.add_argument('path')
    parser.add_argument('--verbose', '-v', action='store_true', default=False)
    parser.add_argument('--debug', action='store_true', default=False)
    parser.add_argument('--no-db', action='store_false',
                        default=True, dest='db')
    parser.add_argument('--no-services', action='store_false',
                        default=True, dest='services')
    args = parser.parse_args()
    CONFIG.args = args

    if args.debug:
        logging.basicConfig(level=logging.DEBUG, format="%(message)s")
    elif args.verbose:
        logging.basicConfig(level=logging.INFO, format="%(message)s")

    cmd = 'tar -C / -xjf ' + args.path
    logging.info(cmd)
    subprocess.check_call(cmd, shell=True)

    stop_services()
    restore_database()
    start_services()
    
    if os.path.exists(RESTORE_SQL):
        logging.info("Removing '%s'", RESTORE_SQL)
        os.remove(RESTORE_SQL)

    logging.info("Removing '/palette-restore'")
    os.remove('/palette-restore')

if __name__ == '__main__':
   main()
