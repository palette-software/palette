#!/bin/sh -e

action="$1"
oldversion="$2"

if [ "$action" != configure ]
then
      echo postinst called with unknown argument: $action
      exit 1
fi

rm -f /etc/ssl/private/ssl-cert-palette-software.key
rm -f /etc/ssl/certs/star_palette-software_com.crt

# Get the database in a state where we can ALTER it, if needed.
set +o errexit
service apache2 status
APACHE_STATUS=$?
set -o errexit

if [ $APACHE_STATUS -eq 0 ];
then
    service apache2 stop
fi

POSTGRES_CONFIG_FILE=/etc/postgresql/9.3/main/postgresql.conf
if grep -q '^max_connections = 100' $POSTGRES_CONFIG_FILE
then
    sed --in-place 's/^max_connections = 100/max_connections = 300/' $POSTGRES_CONFIG_FILE
fi

service postgresql restart

if [ "$oldversion" = "1.0.0" ]; then
    echo Upgrading from 1.0.0 ...
    psql paldb << XYZZY
    drop table event_control;
    drop table data_source_types;
    drop table ports;
    drop table cron;
    create index events_envid_timestamp_idx on events (envid, timestamp);
    create index events_envid_level_timestamp_idx on events (envid, level, timestamp);
    create index events_envid_event_type_timestamp_idx on events (envid, event_type, timestamp);
XYZZY

elif [ "$oldversion" = "1.0.1" ]; then
    echo Upgrading from 1.0.1 ...
    psql paldb << XYZZY
    drop table cron;
    drop table event_control;
    drop table notifications;

    alter table domain add column systemid character varying;
    alter table domain add expiration_time timestamp;
    alter table domain add contact_time timestamp;
    alter table domain add contact_failures integer;
    alter table domain add trial boolean;

    alter table license add column cores integer;
    alter table license add column license_type character varying;
    update license set license_type='Named-user';
XYZZY

elif [ "$oldversion" = "1.1.2" ]; then
    echo Upgrading from 1.1.2 ...
    psql paldb << XYZZY
    drop table event_control;
    drop table cron;
    drop table sites;

    alter table environment drop constraint environment_domainid_fkey;
    alter table environment add foreign key (domainid) references domain(domainid) on update cascade;

    alter table agent_volumes drop constraint agent_volumes_agentid_fkey;
    alter table agent_volumes add foreign key (agentid) references agent(agentid) on delete cascade;

    alter table firewall drop constraint firewall_agentid_fkey;
    alter table firewall add foreign key (agentid) references agent(agentid) on delete cascade;

    alter table license drop constraint license_agentid_fkey;
    alter table license add foreign key (agentid) references agent(agentid) on delete cascade;

    alter table metrics drop constraint metrics_agentid_fkey;
    alter table metrics add foreign key (agentid) references agent(agentid) on delete cascade;

    alter table notifications drop constraint notifications_agentid_fkey;
    alter table notifications add foreign key (agentid) references agent(agentid) on delete cascade;

    alter table ports drop constraint ports_agentid_fkey;
    alter table ports add foreign key (agentid) references agent(agentid) on delete cascade;

    alter table tableau_processes drop constraint tableau_processes_agentid_fkey;
    alter table tableau_processes add foreign key (agentid) references agent(agentid) on delete cascade;

    alter table workbooks drop constraint workbooks_envid_id_key;

    alter table workbooks add constraint workbooks_envid_id unique (envid, site_id, project_id, luid);

XYZZY
elif [ "$oldversion" = "1.2.1" ]; then
    echo Upgrading from 1.2.1 ...
    psql paldb << XYZZY
    drop table event_control;

    alter table workbooks drop constraint workbooks_envid_id_key;

    alter table workbooks add constraint workbooks_envid_id unique (envid, site_id, project_id, luid);
XYZZY
elif [ "$oldversion" = "1.2.4" ]; then
    echo Upgrading from 1.2.4 ...
    psql paldb << XYZZY
    drop table event_control;

    alter table tableau_processes drop constraint tableau_processes_pkey;
    alter table tableau_processes add column tid bigserial;
    alter table tableau_processes add constraint tableau_processes_pkey primary key (tid);
XYZZY
elif [ "$oldversion" = "1.4.3" -o "$oldversion" = "1.4.4" -o "$oldversion" = "1.4.5" ]; then
    echo Upgrading from $oldversion ...

    rm -fr /etc/cron.d/support-control

    echo '15 6 * * *   root    test -x /usr/sbin/palette-update && /usr/sbin/palette-update > /dev/null 2>&1' > /etc/cron.d/palette-update
    chmod 600 /etc/cron.d/palette-update

    psql paldb << XYZZY
    drop table event_control;

    alter table license add column core_licenses integer;

    alter table datasources add column first_published_at timestamp;
    alter table datasources add column connectable boolean;
    alter table datasources add column is_hierarchical boolean;
    alter table datasources add column extracts_incremented_at timestamp;

    drop table http_control;
    drop table cron;

    update system set value='735' where key='metric-save-days';

XYZZY
elif [ "$oldversion" = "1.5.3" -o "$oldversion" = "1.5.4" ]; then
    psql paldb << XYZZY
    alter table workbook_updates add column fileid_twbx integer;
    alter table workbook_updates add foreign key (fileid_twbx) references files(fileid) on delete cascade;

    alter table workbook_updates drop constraint workbook_updates_fileid_fkey;
    alter table workbook_updates add foreign key (fileid) references files(fileid) on delete cascade;

    alter table workbook_updates add column twb text;

    alter table workbook_updates drop constraint workbook_updates_workbookid_fkey;
    alter table workbook_updates add foreign key (workbookid) references workbooks(workbookid) on delete cascade;

    alter table extracts add column progress integer;
    alter table extracts add column job_type character varying;
    alter table extracts add column notification_state integer not null default 0;

    alter table event_control add column custom boolean default false;

    drop table datasources;
    drop table cron;

    update system set key='workbook-archive-enabled' where key='archive-enabled';
XYZZY
elif [ "$oldversion" = "1.6.0" -o "$oldversion" = "1.6.1" ]; then
    echo Upgrading $oldversion
    psql paldb << XYZZY
    alter table workbook_updates drop constraint workbook_updates_fileid_fkey;
    alter table workbook_updates add foreign key (fileid) references files(fileid) on delete cascade;

    alter table workbook_updates alter fileid_twbx type integer using fileid_twbx::integer;
    alter table workbook_updates add foreign key (fileid_twbx) references files(fileid) on delete cascade;

    alter table datasource_updates drop constraint datasource_updates_fileid_tds_fkey;
    alter table datasource_updates drop constraint datasource_updates_fileid_tdsx_fkey;
    alter table datasource_updates add foreign key (fileid_tds) references files(fileid) on delete cascade;
    alter table datasource_updates add foreign key (fileid_tdsx) references files(fileid) on delete cascade;
XYZZY
elif [ "$oldversion" = "1.6.3" -o "$oldversion" = "1.6.5" ]; then
    psql paldb << XYZZY
    alter table users add column phone character varying;

    drop table cron;
XYZZY
elif [ "$oldversion" != "" ]; then
    echo Upgrading $oldversion
    # We are upgrading from a previous version (vs. a new install).
    # Currently: nothing special to do.
elif [ "$oldversion" = "" ]; then
    echo First install

    # The "| echo" is so it returns exit status of 0 even if they already exist.
    sudo -u postgres createuser --superuser $USER 2>&1 | echo

    echo CREATE ROLE palette WITH SUPERUSER LOGIN PASSWORD \'palpass\' | sudo -u postgres psql 2>&1 | echo

    sudo -u postgres createdb paldb 2>&1 | echo
    psql paldb -c "ALTER DATABASE paldb SET timezone TO 'GMT'" 2>&1 | echo

    mkdir -p /var/log/palette /var/palette/data/workbook-archive
    if [ ! -f /var/palette/.aes ]; then
        dd if=/dev/urandom of=/var/palette/.aes bs=32 count=1
        chown www-data /var/palette/.aes
        chmod 0400 /var/palette/.aes
    fi

    apt-key add /usr/share/palette/conf/key.asc

    echo '15 6 * * *   root    test -x /usr/sbin/palette-update && /usr/sbin/palette-update > /dev/null 2>&1' > /etc/cron.d/palette-update
    chmod 600 /etc/cron.d/palette-update
fi

# When upgrading from 2.0.266 and before we need to add a new column to agent_volumes
newversion="2.0.266"
versions="${oldversion}\n$newversion"
orderedversions=$(echo -e $versions | sort -V)
outputifoldislower=`echo -e "X$oldversion\n$newversion"`
if [ "$outputifoldislower" = "X$orderedversions" ]; then
    psql paldb << XYZZY
    alter table agent_volumes add column priority BIGINT DEFAULT 50
XYZZY
fi

update-rc.d controller defaults
service controller start

# Restart apache if it had been running before
if [ $APACHE_STATUS -eq 0 ];
then
    service apache2 start
fi

exit 0
