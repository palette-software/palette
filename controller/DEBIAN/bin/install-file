#!/usr/bin/env python

import os
import sys

from palapi import UpgradeHandler, UpgradeException

class Upgrade(object):

    def __init__(self):

        # State of the controller and its update mode.
        self.state_update = False

        self.comm = UpgradeHandler()

        if self.comm.verbose:
            if self.comm.console:
                print 'Doing console update'
            elif self.comm.target_dir:
                print 'Doing non-console update'
            else:
                print 'Nothing to do.'
                sys.exit(3)

        if not os.path.exists(self.comm.newfile):
            self.error("No such file: %s" % self.comm.newfile)

        checksum = self.comm.checksum(self.comm.newfile)
        if self.comm.verbose:
            print "checksum of %s: %s" % (self.comm.newfile, checksum)

        try:
            self.comm.send_cmd("update on")
    
            self.state_update = True

            filename_only = os.path.basename(self.comm.newfile)
            filename_only_tmp = filename_only + '.download'
    
            agent = self.comm.get_agent_info()

            if self.comm.console:
                target_dir = agent['install_dir']
            elif self.comm.target_dir:
                target_dir = self.comm.target_dir
            else:
                self.error("Nothing to do.")

            target_path_tmp = agent['path'].join(target_dir,
                                                        filename_only_tmp)
            target_path = agent['path'].join(target_dir, filename_only)
    
            # order: file put <dest> <source>
            self.comm.send_cmd("file put '%s' '%s'" % (target_path_tmp,
                                                        self.comm.newfile))

            self.comm.send_cmd("file sha256 '%s'" % target_path_tmp)
            if not 'hash' in self.comm.result:
                self.error(\
                    "sha256 command on file '%s' failed.  Missing 'hash': %s",
                        target_path_tmp, result)

            agent_checksum = self.comm.result['hash']

            if checksum != agent_checksum:
                self.error(\
                    "Checksum on controller (%s) didn't match agent (%s)." % \
                        checksum, agent_checksum)
    

            # order: file move <src> <dest>
            self.comm.send_cmd("file move '%s' '%s'" % (target_path_tmp,
                                                            target_path))

            if self.comm.console:
                self.comm.send_cmd("hup")
                if result['stdout'] != 'OK':
                    self.error("HUP failed.")

            self.comm.send_cmd("update off")

        except UpgradeException, e:
            self.error(e)

            self.update_back()

        except KeyboardInterrupt:
            print "\nInterrupted.  Exiting."

            self.update_back()

    def update_back(self):
        if self.state_update:
            self.comm.send_cmd("update off")

    def error(self, msg):
        print >> sys.stderr, "%s: %s" % (sys.argv[0], msg)

        self.update_back()

        sys.exit(2)

if __name__ == "__main__":
    Upgrade()
