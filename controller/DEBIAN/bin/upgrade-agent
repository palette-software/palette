#!/usr/bin/env python

import os
import sys
import time
import argparse

from controller.palapi import UpgradeHandler, UpgradeException

class Upgrade(object):

    CONSOLE_AGENT="ConsoleAgent.exe"

    def __init__(self):
        parser = argparse.ArgumentParser(sys.argv[0])

        group1 = parser.add_mutually_exclusive_group()

        group1.add_argument('-v', '--verbose', dest='verbose', type=int,
                            default=1)
        group1.add_argument('-q', '--quiet', dest='quiet',
                                        action='store_true', default=False)

        parser.add_argument('--dry-run', dest='dry_run', action='store_true',
                            default=False)

        parser.add_argument('--hostname', dest='hostname', default='localhost')
        parser.add_argument('--port', dest='port', type=int, default=9000)
        parser.add_argument('--envid', dest='envid', type=int, default=1)

        parser.add_argument('--target-dir', '-t', dest='target_dir')
        parser.add_argument('--source-dir', '-s', dest='source_dir',
                            required=True)

        group2 = parser.add_mutually_exclusive_group()
        group2.add_argument('--displayname', dest='displayname')
        group2.add_argument('--uuid', dest='uuid')
        group2.add_argument('--type', dest='agent_type', default='primary')

        self.args = parser.parse_args()

        self.comm = UpgradeHandler(self.args)

        # State of the controller and its upgrade mode.
        self.state_upgrade = False

        try:
            self.upgrade()

        except UpgradeException, e:
            self.error(e)
            self.upgrade_back()

        except KeyboardInterrupt:
            print "\nInterrupted.  Exiting."
            self.upgrade_back()

    def upgrade(self):
        agent = self.comm.get_agent_info()
        if self.args.target_dir:
            self.normal_target_dir = self.args.target_dir
        else:
            self.normal_target_dir = agent['path'].join(agent['install-dir'])

        self.comm.send_cmd("file listdir '%s'" % self.normal_target_dir)
        self.target_files = self.comm.result['files']

        source_files =  [f for f in os.listdir(self.args.source_dir) if \
                        os.path.isfile(os.path.join(self.args.source_dir, f))]

        source_files = sorted(source_files)
        if self.args.verbose:
            print "agent:", agent['displayname']
            print "agent target_dir:",  self.normal_target_dir
            print "local source_dir:", self.args.source_dir
            print "Source files to upgrade:", ', '.join(source_files)
            if self.args.dry_run:
                print "DRY RUN - WILL NOT UPDATE"

        # Find out if the controller is already in UPGRADING state and
        # go into UPGRADING state if it isn't already.
        self.comm.send_cmd("upgrade")
        self.initial_state = self.comm.result['main-state']
        if self.initial_state != 'UPGRADING':
            if self.args.verbose:
                print "Enabling UPGRADE state"
            if not self.args.dry_run:
                self.comm.send_cmd("upgrade on")
            if self.args.verbose:
                print "Sleeping for 2 seconds after entering upgrade state."
            time.sleep(2)

        self.state_upgrade = True
        console_updated = False

        upgrade_count = 0

        for filename_only in source_files:

            # Checksum source file
            source_full_pathname = os.path.join(self.args.source_dir,
                                                filename_only)
            source_checksum = self.comm.checksum(source_full_pathname)

            # Checksum target file
            if filename_only in self.target_files:
                target_checksum_file = \
                    agent['path'].join(self.normal_target_dir, filename_only)
                self.comm.send_cmd("file sha256 '%s'" % target_checksum_file)
                if not 'hash' in self.comm.result:
                    raise UpgradeException("sha256 command on file " +
                        "'%s' failed.  Missing 'hash': %s",
                        target_checksum_file, self.comm.result)

                if self.comm.result['hash'] == source_checksum:
                    if self.args.verbose:
                        print "Skipping - same checksum:", filename_only
                    continue

                upgrade_count += 1

                if self.args.dry_run:
                    print "Would update if not DRY-RUN:", source_full_pathname
                    continue

            # Either the checksum didn't match or the file didn't exist
            # on the agent: Copy this file to the agent.
            self.put_file(agent, source_full_pathname, source_checksum)

            if filename_only == self.CONSOLE_AGENT:
                console_updated = True


        time.sleep(1)   # Give time to finish
        if console_updated:
            if self.args.verbose:
                print "Sending 'hup' for update to", self.CONSOLE_AGENT
            self.comm.send_cmd("hup")

        if self.initial_state != 'UPGRADING':
            if self.args.verbose:
                print "Disabling UPGRADE state"
            if not self.args.dry_run:
                self.comm.send_cmd("upgrade off")

        if self.args.dry_run:
            print "DRY-RUN: Would have upgraded:", upgrade_count, "file(s)."
        elif self.args.verbose:
            if not upgrade_count:
                print "No files upgraded."
            else:
                print "Upgrade of %d file(s) successful." % upgrade_count

        sys.exit(0)

    def put_file(self, agent, source_full_pathname, source_checksum):
        filename_only = os.path.basename(source_full_pathname)

        # ConsoleAgent.exe goes in the 'upgrade' sub-directory
        # and the 'hup' command causes the copy of ConsoleAgent.exe
        # up a level before it is run.
        if filename_only == self.CONSOLE_AGENT:
            target_dir = agent['path'].join(self.normal_target_dir,
                                            'upgrade')
        else:
            target_dir = self.normal_target_dir

        target_full_pathname = agent['path'].join(target_dir, filename_only)

        filename_only_tmp = filename_only + '.download'
        target_path_tmp = agent['path'].join(target_dir, filename_only_tmp)

        # If the tmp file existed, from a previous failed attempt, remove it.
        if filename_only_tmp in self.target_files:
            self.comm.send_cmd("file delete '%s'" % target_path_tmp)

        # order: file put <dest-full-pathname> <source-full-pathmame>
        self.comm.send_cmd("file put '%s' '%s'" % (target_path_tmp,
                                                   source_full_pathname))

        # Get the agent file's checksum we just PUT.
        self.comm.send_cmd("file sha256 '%s'" % target_path_tmp)
        if not 'hash' in self.comm.result:
            raise UpgradeException("sha256 command on file " +
                "'%s' failed.  Missing 'hash': %s",
                target_path_tmp, self.comm.result)

        agent_checksum = self.comm.result['hash']

        # If the checksum of the newly put file didn't match,
        # it's a fatal error.
        if source_checksum != agent_checksum:
            self.comm.send_cmd("file delete '%s'" % target_path_tmp)
            raise UpgradeException(
                "Checksum on controller (%s) didn't match agent (%s)." % \
                    (source_checksum, agent_checksum))


        # Delete the old one before moving the temporary one to
        # its new location.
        if filename_only == self.CONSOLE_AGENT:
            self.comm.send_cmd("file listdir '%s'" % target_dir)
            target_files = self.comm.result['files']
        else:
            target_files = self.target_files

        if filename_only in target_files:
            self.comm.send_cmd("file delete '%s'" % target_full_pathname)

        # order: file move <src-full-pathname> <dest-full-pathname>
        self.comm.send_cmd("file move '%s' '%s'" % (target_path_tmp,
                                                        target_full_pathname))

        if self.args.verbose:
            print "Upgraded %s to %s..." % (target_full_pathname,
                                        source_checksum[:10])

    def upgrade_back(self):
        if self.state_upgrade and self.initial_state != 'UPGRADING':
            try:
                if not self.args.dry_run:
                    self.comm.send_cmd("upgrade off")
            except UpgradeException, e:
                print >> sys.stderr, "%s: %s" % (sys.argv[0], e)

    def error(self, msg):
        print >> sys.stderr, "%s: %s" % (sys.argv[0], msg)

        self.upgrade_back()

        sys.exit(2)

if __name__ == "__main__":
    Upgrade()
