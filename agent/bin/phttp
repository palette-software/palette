#!/usr/bin/env python

import os
import sys
import base64
import httplib
from urlparse import urlparse

class Phttp(object):

    def __init__(self, conn, auth):
        self.conn = conn
        self.auth = auth

    def build_file_path(self, uri, path):
        uri_path = urlparse(uri).path
        uri_filename = os.path.basename(uri_path)
        return os.path.join(path, uri_filename)

    def save(self, source, dest_path, bufsize=8192):
        dest = open(dest_path, "w")

        bytes_read = 0

        while True:
            buf = source.read(bufsize)
            if not buf:
                break
            bytes_read += len(buf)
            dest.write(buf)

        print "Download of file '%s' completed. %d bytes read." % \
                                                (dest_path, bytes_read)
        dest.close()

    def do_get(self, uri, path):

        self.conn.putrequest("GET", uri)
        self.conn.putheader("Authorization", "Basic %s" % self.auth)
        try:
            self.conn.endheaders()
        except (httplib.HTTPException, EnvironmentError) as e:
            print >> sys.stderr, "%s: %s" % (sys.argv[0], e)
            sys.exit(-1)

        res = self.conn.getresponse()

        if res.status != httplib.OK:
            print >> sys.stderr, \
                "%s: Failed to GET '%s'.  Status: %d. Reason: %s" % \
                                (sys.argv[0], uri, res.status, res.reason)
            sys.exit(-3)

        dest_path = self.build_file_path(uri, path)

        self.save(res, dest_path)

    def do_put(self, uri, path):

        try:
            fd = open(path, "r")
        except EnvironmentError, e:
            print >> sys.stderr, "%s: %s" % (sys.argv[0], e)
            sys.exit(-1)

        self.conn.request('PUT', uri, fd,
                                {"Authorization": "Basic %s" % self.auth})

        res = self.conn.getresponse()

        fd.close()

        if res.status != httplib.OK:
            print >> sys.stderr, \
                "%s: Failed to PUT '%s'.  Status: %d. Reason: %s" % \
                                (sys.argv[0], uri, res.status, res.reason)
            sys.exit(-3)

        print "%s: PUT to URI '%s' of file '%s' completed." % \
                                                    (sys.argv[0], uri, path)

    def usage():
        print >> sys.stderr, \
                        'Usage: phttp GET|PUT <URL> [source-or-destination]'
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 3 or len(sys.argv) > 4:
        usage()

    if not 'BASIC_USERNAME' in os.environ:
        print >> sys.stderr, \
            "%s: Missing BASIC_USERNAME enironment variable." % sys.argv[0]
        sys.exit(2)

    if not 'BASIC_PASSWORD' in os.environ:
        print >> sys.stderr, \
            "%s: Missing BASIC_PASSWORD enironment variable." % sys.argv[0]
        sys.exit(2)

    username = os.environ['BASIC_USERNAME']
    password = os.environ['BASIC_PASSWORD']
    auth = base64.encodestring('%s:%s' % (username, password))[:-1]

    method = sys.argv[1].upper()
    url = sys.argv[2]

    scheme, netloc, url_path, params, query, fragment = urlparse(url)
    if query:
        url_path += "?" + query
    if fragment:
        url_path += '#' + fragment

    if scheme == 'https':
        fn = httplib.HTTPSConnection
    elif scheme == 'http':
        fn = httplib.HTTPConnection
    else:
        print >> sys.stderr, "%s: Bad scheme in URL: %s" % (sys.argv[0], url)
        sys.exit(-2)

    try:
        conn = fn(netloc)
    except (httplib.HTTPException, EnvironmentError) as e:
        print >> sys.stderr, "%s: %s" % (sys.argv[0], e)
        sys.exit(-1)

    phttp = Phttp(conn, auth)

    if method == "GET":
        if len(sys.argv) == 3:
            path = os.getcwd()
        else:
            path = sys.argv[3]
        phttp.do_get(url_path, path)
    elif method == "PUT":
        path = sys.argv[3]
        phttp.do_put(url_path, path)
    else:
        phttp.usage()

    sys.exit(0)
